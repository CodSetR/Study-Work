        def checker(candidates : list,target: int):
            if target == 1 : return []
            result,track,check_permutations,check = [],[0 for x in candidates],[],0
            def backtracking():
                nonlocal check
                for i in candidates :
                    check += i
                    track[candidates.index(i)] += 1
                    if check < target :
                        backtracking()
                        check -= i
                        track[candidates.index(i)] -= 1
                    elif check == target :
                        if not (track.copy() in check_permutations) :
                            sol = []
                            for j in range(len(track)) :
                                for x in range(track[j]) :
                                    sol.append(candidates[j])
                            result.append(sol.copy())
                            check_permutations.append(track.copy())
                        check -= i
                        track[candidates.index(i)] -= 1
                    elif check > target :
                        check -= i
                        track[candidates.index(i)] -= 1
            backtracking()
            return result
        return checker(candidates,target)
